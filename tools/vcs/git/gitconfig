# https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig
[user]
	name = Wu Wenbin
	email = 541330190@qq.com
	; signingkey =
[github]
	user = Wu Wenbin
[gitlab]
	user = Wu Wenbin
[init]
	defaultBranch = main
	templatedir = ~/.local/share/dotfiles/tools/vsc/git/template
[core]
	excludesfile = /Users/eqielb/.gitignore
	attributesfile = ~/.gitattributes
    editor = vim
	ignorecase = false
	autocrlf = false # 禁止自动修改换行符
	saftcrlf = true
	quotepath = false # status 引用路径不再是八进制，允许使用中文。
	pager = less -FRSX # delta
  	editor = code --wait
	
	# Treat spaces before tabs and all kinds of trailing whitespace as an error.
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS.
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true
[alias]

	# Show the user email for the current repository.
	whoami = config user.email
	root = rev-parse --show-toplevel

	# List aliases.
	aliases = config --get-regexp alias

	# remote
	# Set remotes/origin/HEAD -> defaultBranch (copied from https://stackoverflow.com/a/67672350/14870317)
	remoteSetHead = remote set-head origin --auto
	remotes = remote --verbose # remote -v

	# branch
	# via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
    recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'
	branches = branch -a
	br = branch
	bv = branch -vv
	ba = branch -ra
	bd = branch -d
	branches = branch --all

	# clone 
	cl	= clone --recurse-submodules -j8
    cl1 = clone --recurse-submodules -j8 --depth 1
	c = clone --recursive # Clone a repository including all submodules.

	# checkout
	co = checkout                     # checkout
	nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")
	# Switch to a branch, creating it if necessary.
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# add
    a = add                           # add
	aa = add --all
    ap = add --patch				# stage commits chunk by chunk

	# commit
	c = commit -m                     # commit with message
	ca = commit -am                   # commit all with message
	ci = commit -v
	amend = commit --amend            # ammend your last commit
	amend = commit --amend --reuse-message=HEAD # Amend the currently staged files to the latest commit.
	cm	= commit
	ca = !git add -A && git commit -av # Commit all changes.
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f" # Credit an author on the latest commit.

	# stash
	ss = stash                        # stash changes
	sl = stash list                   # list stashes
	sa = stash apply                  # apply stash (restore changes)
	sd = stash drop                   # drop stashes (destory changes)

	# status
	s = status -s # View the current working tree status using the short format.
	st = status                     

	# diff
	d = diff                          # diff unstaged changes
	dc = diff --cached                # diff staged changes
	last = diff HEAD^                 # diff last committed change
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat" 	# Show the diff between the latest commit and the current state.
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state.
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	d = !git --no-pager diff
	dt  = difftool
	stat = !git --no-pager diff --stat

	# log
	last	= log -1
	glog	= log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	dag     = log --graph --format='format:%C(yellow)%h%C(reset) %C(blue)%an <%ae>%C(reset) %C(magenta)%cr%C(reset)%C(auto)%d%C(reset)%n%s' --date-order
	changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
	short   = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
	simple  = log --pretty=format:\" * %s\"
	shortnocolor = log --pretty=format:\"%h %cr %cn %s\"
	contributors = shortlog --summary --numbered --email # Shows list of contributors of a repository.
	lg = log --graph --all --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)%an%Creset %C(yellow)%d%Creset' # http://www.jukie.net/bart/blog/pimping-out-git-log
	filelog = log -u                  # show changes to a file

	# data analysis
	ranked-authors = !git authors | sort | uniq -c | sort -n
	emails = !git log --format="%aE" | sort -u
	email-domains = !git log --format="%aE" | awk -F'@' '{print $2}' | sort -u

	# fetch
	fo = fetch origin

	# pull
	pl = pull                      
	# Pull in remote changes for the current repository and all its submodules.
	p = pull --recurse-submodules
	
	# push
	ps = push                      
    pf = push --force-with-lease

	# rebase
	rc = rebase --continue            # continue rebase
	rs = rebase --skip                # skip rebase
	reb = "!r() { git rebase -i HEAD~$1; }; r" # Interactive rebase with the given number of latest commits.

	# reset
	unstage = reset HEAD              # remove files from index (tracking)
	uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
	unstage = reset HEAD --           # Removes a file from the index
	unst = reset HEAD
	throw	= reset --hard HEAD
	throwh	= reset --hard HEAD^

	## tag
	t = tag -n                        # show tags with <n> lines of each tag message
	tags = tag -l
	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# svn helpers
	svnr = svn rebase
	svnd = svn dcommit
	svnl = svn log --oneline --show-commit

	# submodule
	sm	= submodule
    smr = delete-submodule
    smd = submodule deinit -f .
    smi = submodule update --init --recursive -j 8
    smu = submodule update --remote --merge

	# find
	fb = "!f() { git branch -a --contains $1; }; f" # Find branches containing commit
	ft = "!f() { git describe --always --contains $1; }; f" # Find tags containing commit
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f" # Find commits by source code
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f" # Find commits by commit message

	## others
	# Clean merged branches (adapted from https://stackoverflow.com/a/6127884/14870317)
	sweep = !git branch --merged $(git defaultBranch) | grep -E -v " $(git defaultBranch)$" | xargs -r git branch -d && git remote prune origin

	# Serve local repo. http://coderwall.com/p/eybtga
	# Then other can access via `git clone git://#{YOUR_IP_ADDRESS}/
	serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git

	cp = cherry-pick -x               # cherry-pick grab a change from a branch
	mt = mergetool                    # fire up the merge tool

    # via http://philjackson.github.io/2013/04/07/handy-git-tips-to-stop-you-getting-fired.html
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    snapshots = !git stash list --grep snapshot

	# Remove branches that have already been merged with main.
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	rr = rm -r --cached .
	prco = pr checkout
	clf	= clean -fdx -f

	accept-ours = "!f() { git checkout --ours -- \"${@:-.}\"; git add -u \"${@:-.}\"; }; f"
	accept-theirs = "!f() { git checkout --theirs -- \"${@:-.}\"; git add -u \"${@:-.}\"; }; f"
	tagcommit = !sh -c 'git rev-list $0 | head -n 1'

[interactive]
	diffFilter = delta --color-only
[gui]
	encoding = utf-8 # 代码库统一使用 utf-8 编码
[i18n]
	commitencoding = utf-8 # log 编码
[svn]
	pathnameencoding = utf-8 # 支持中文路径
[log]
	date = local
[format]
	pretty = format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
[http]
	postBuffer = 524288000
	sslverify = true
	# Automatically correct and execute mistyped commands.
	autocorrect = 1
[delta]
    navigate = true  # use n and N to move between diff sections
    light = true
    # side-by-side = true
    # delta --show-syntax-themes --light
    syntax-theme = GitHub

###############################################################################
# 颜色配置
[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
    ui = auto
# [color "branch"]
# 	current = green
# 	local = yellow
# 	remote = red
# [color "diff"]
# 	meta = yellow bold
# 	frag = magenta bold
# 	old = red
# 	new = green
# [color "status"]
# 	added = green
# 	changed = red
# 	untracked = cyan
###############################################################################
# fetch pull push
[fetch]
  	prune = true
[pull]
	rebase = true
[push]
	default = simple
	followTags = true
	autoSetupRemote = true
	gpgSign = if-asked
	autoSquash = true
###############################################################################
# diff
[diff]
    # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
    # instead of a/b/c/d as prefixes for patches
    mnemonicprefix = true
	algorithm = patience
    colorMoved = zebra # default
	# Detect copies as well as renames.
	renames = copies
[diff "lisp"]
	xfuncname = "^(((;;;+ )|\\(|([ \t]+\\(((cl-|el-patch-)?def(un|var|macro|method|custom)|gb/))).*)$"
[diff "org"]
	xfuncname = "^(\\*+ +.*)$"
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
###############################################################################
# merge
[merge]
	# https://git-scm.com/docs/git-config#git-config-pushdefault
  	# conflictstyle = diff3
  	ff = only
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true
	summary = true
	verbosity = 1
	tool = sourcetree
    conflictstyle = diff3
[mergetool "sourcetree"]
	cmd = /Applications/Apps/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[mergetool "mvimdiff"]
    cmd="mvim -c 'Gdiff' $MERGED"     # use fugitive.vim for 3-way merge
    keepbackup=false
[mergetool "meld"]
    cmd = meld $LOCAL $BASE $REMOTE --output=$MERGED --auto-merge
###############################################################################
[remote "origin"]
	proxy =
[branch]
	# Show most recently changed branches first.
	sort = -committerdate
    autosetupmerge = true
[branch "master"]
  	mergeoptions = --no-edit
###############################################################################
[commit]
	# https://help.github.com/articles/signing-commits-using-gpg/
	gpgsign = false
	template = ~/.local/share/dotfiles/tools/vcs/git/gitmessage
[rebase]
  	autosquash = true
[tag]
	gpgSign = false
###############################################################################
[apply]
	# Detect whitespace errors when applying a patch.
    whitespace = fix # nowarn
[advice]
  	statusHints = false
[rerere]
	# Remember my merges
	# http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
	enabled = true
[include]
  	path = .gitconfig.user

[url "ssh://git@"]
	insteadOf = https://
[url "https://"]
	insteadOf = git://
# [gpg]
# 	program = gpg

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
